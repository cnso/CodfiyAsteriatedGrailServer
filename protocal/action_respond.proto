package network;

enum MessageType2 {
    MSG_ROLE_REQ = 101;
    MSG_PICK_BAN = 102;
    MSG_ACTION = 103;
    MSG_RESPOND= 104;
    MSG_CMD_REQ = 106;
    MSG_ERROR_INPUT = 107;
	MSG_HIT = 108;
	MSG_TURN_BEGIN = 109;
	MSG_CARD = 110;
	MSG_HURT = 111;
	MSG_SKILL = 112;
}

enum PlayerIdConst {
	PLAYER_NONE_ID = 100000;
}



enum ROLE_STRATEGY{    
	ROLE_STRATEGY_RANDOM = 1;
	ROLE_STRATEGY_31 = 2;
	ROLE_STRATEGY_BP = 3;
	ROLE_STRATEGY_CM = 4;
	ROLE_STRATEGY_ANY = 5;
	ROLE_STRATEGY_ALL = 9;
}

enum SEAT_MODE{    
	SEAT_MODE_RANDOM = 1;
	SEAT_MODE_2COMBO = 2;
	SEAT_MODE_3COMBO = 3;
	SEAT_MODE_INTERLACE = 4;
	SEAT_MODE_RBBRRB = 5;
}

enum BP_OPRATION{
	BP_NULL = 1;
	BP_BAN = 2;
	BP_PICK = 3;
}
enum CM_OPRATION{
	CM_NULL = 1;
	CM_RED_BAN = 2;
	CM_RED_IB = 3;
	CM_RED_PICK = 4;
	CM_BLUE_BAN = 5;
	CM_BLUE_IB = 6;
	CM_BLUE_PICK = 7;
}
// s -> c 备选角色
message RoleRequest {
    required uint32 id = 1; //询问的玩家id
    optional ROLE_STRATEGY strategy = 2;
    repeated uint32 role_ids = 3;   // 可选角色
	repeated int32 args = 4; //0 未选择 正 被此id选择 负 被此idban
	optional uint32 opration = 5;
}

// c -> s 角色选取
message PickBan {
    optional uint32 strategy = 1;
    optional bool is_pick = 2;
    repeated uint32 role_ids = 3;
}

// s -> c 回合开始消息
message TurnBegin {
    optional uint32 id = 1;    // 开始角色的id
	optional uint32 round = 2; // 当前回合
}


// 基础行动，常量不合适随意修改
enum BasicActionType {
    ACTION_ATTACK = 1;   // 用于c->s，斩 / 用于s->c，标识可以执行攻击行动
    ACTION_MAGIC = 2;    // 用于c->s，基础法术 / 用于s->c，标识可以执行法术行动
	ACTION_SPECIAL = 3;  // 用于c->s，特殊行动 / 用于s->c，标识可以执行特殊行动
	ACTION_ATTACK_SKILL = 4;  //用于c->s，攻击技能，非响应A，只有欺诈，多重射击
	ACTION_MAGIC_SKILL = 5;   //用于c->s，法术技能
	ACTION_SPECIAL_SKILL = 6; //用于c->s，特殊技能
	ACTION_ANY = 7;   // 用于s->c，标识可以使用任何行动
	ACTION_ATTACK_MAGIC = 8; // 用于s->c，标识可以使用斩或法术行动
	ACTION_UNACTIONAL = 9; //用于c->s，宣告无法行动
	ACTION_NONE = 100000; // 用于c->s，放弃行动 / 用于s->c，无法行动
}


// c -> s, s -> c 行动，根据不同的行动填写不同长度的args
message Action {
    optional uint32 action_type = 1;
    optional uint32 action_id = 2;
    optional uint32 src_id = 3;
	repeated uint32 dst_ids = 4;
	repeated uint32 card_ids = 5;
	repeated uint32 args = 6;	
}

// 基础响应，常量不合适随意修改
enum BasicRespondType {
    RESPOND_REPLY_ATTACK = 10; // 应战
    RESPOND_BULLET = 11;       // 魔弹响应
    RESPOND_HEAL = 12;         // 治疗响应
    RESPOND_DISCARD = 13;      // 丢弃手牌
	RESPOND_WEAKEN = 14;       // 虚弱
	RESPOND_ADDITIONAL_ACTION = 15;       // 额外行动
	RESPOND_DISCARD_COVER = 16;           // 丢弃盖牌
	RESPOND_ROLE = 17;
	RESPOND_INSERT_BAN = 18;
}

// c -> s, s -> c 启动及技能响应及应战及治疗响应及爆牌，根据不同的行动填写不同长度的args，可以用到 s -> c
message Respond {
    optional uint32 respond_id = 1;    // 启动响应技能种类过多，不写常量了
	optional uint32 src_id = 2;
	repeated uint32 dst_ids = 3;
	repeated uint32 card_ids = 4;
	repeated uint32 args = 5;
}


enum CmdType {
    CMD_ACTION = 1;
    CMD_RESPOND = 2;
}

// 不能单独发送
message Command {
    optional uint32 respond_id = 1;    // 或为基础行动，或为响应，0代表此次行动可放弃
    optional uint32 src_id = 2;
	repeated uint32 dst_ids = 3;
	repeated uint32 card_ids = 4;
	repeated uint32 args = 5;
}

// s -> c 动作询问
message CommandRequest {
    optional CmdType cmd_type = 1;
    // CMD_ACTION时，表示有哪几种action选择
    // CMD_RESPOND时，表示有哪几种respond选择
    repeated Command commands = 2;
}

// s -> c 发送了错误的行动或响应或启动
message ErrorInput {
    optional CmdType error_type = 1;
    // 错误为CMD_ACTION时，表示有哪几种action选择
    // 错误为CMD_RESPOND时，表示有哪几种respond选择
    repeated Command commands = 2;
}


// s -> c 命中与否，攻击是否命中
message HitMsg {
	optional uint32 cmd_id = 1;
	optional uint32 hit = 2;
	optional uint32 src_id = 3;
	optional uint32 dst_id = 4;
}

enum CardMsgType{
    CM_USE = 1;
	CM_SHOW = 2;
}

// s -> c 卡牌使用，仅用于攻击及魔法牌的基础效果运用
message CardMsg {
    optional uint32 type = 1;
	optional uint32 src_id = 2;
	optional uint32 dst_id = 3;
	repeated uint32 card_ids = 4;
	optional bool is_real = 5;
}

// s -> c 伤害消息
message HurtMsg {
    optional uint32 src_id = 1;
	optional uint32 dst_id = 2[default=100000];
	optional uint32 hurt = 3;
	optional uint32 cause = 4;     // 技能或操作id
	optional uint32 type = 5;      // 伤害类型，1：魔法，2：物理
}

// s -> c 技能消息
message SkillMsg {
    optional uint32 skill_id = 1;  // 同cause
    optional uint32 src_id = 2;
	repeated uint32 dst_ids = 3;
}