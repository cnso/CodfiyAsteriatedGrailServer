package network;
import "action_respond.proto";
enum MessageType {
    MSG_REGISTER_REQ = 1;
	MSG_REGISTER_REP = 2;
    MSG_LOGIN_REQ = 3;
    MSG_LOGIN_REP = 4;
	MSG_LOGOUT_REQ = 5;
	MSG_LOGOUT_REP = 6;
	
	MSG_ROOMLIST_REQ = 7;
	MSG_ROOMLIST_REP = 8;
	MSG_CREATE_ROOM_REQ = 9;
	MSG_ENTER_ROOM_REQ = 10;
	MSG_ENTER_ROOM_REP = 11;
	MSG_LEAVE_ROOM_REQ = 12;
	MSG_JOIN_TEAM_REQ = 13;
	MSG_READY_GAME_REQ = 14;

    MSG_SINGLE_PLAYER = 15;
    MSG_GAME = 16;
    MSG_TALK = 17;
    MSG_GOSSIP = 18;
	MSG_ERROR = 19;	
	MSG_HEARTBEAT = 20;
}

// c -> s 注册请求
message RegisterRequest {
	optional string user_id = 1;
	optional string user_password = 2;
	optional string nickname = 3;
	optional string mobile = 4;
	optional string email = 5;
}

// s -> c 注册响应
message RegisterResponse {
	optional uint32 state = 1;
}

// c -> s 登陆请求
message LoginRequest {
    required bool asGuest = 1;
    optional string user_id = 2;
    optional string user_password = 3;
	optional int32 version = 4 [default = -1];
}

// s -> c 登陆响应
message LoginResponse {
    required int32 state = 1;
	optional string nickname = 2;
}

// c -> s 登出请求
message LogoutRequest {
}

// s -> c 登出响应
message LogoutResponse {
	repeated uint32 args = 1;
}

// c -> s 获取游戏列表
message RoomListRequest {
	required ROLE_STRATEGY role_strategy = 1;
}

// s -> c 游戏列表
message RoomListResponse {
	message RoomInfo{
		optional int32 room_id = 1;
		optional string room_name = 2;
		optional int32 max_player = 3;
		optional int32 now_player = 4;
		optional ROLE_STRATEGY role_strategy = 5;
		optional int32 seat_mode = 6;
		optional int32 role_range = 7;
		optional bool allow_guest = 8 [default = true];
		optional bool has_password = 9 [default = false];
		optional bool first_extension = 10;
		optional bool second_extension = 11;
		optional bool sp_mo_dao = 12;
		optional bool playing = 13 [default = false];
		optional bool silence = 14 [default = false];
	}
	repeated RoomInfo rooms = 1;
}

// c -> s 创建房间
message CreateRoomRequest {
    optional string room_name = 1;
	optional int32 max_player = 2;
	optional ROLE_STRATEGY role_strategy = 3;	
	optional bool first_extension = 4;
	optional bool second_extension = 5;
	optional bool sp_mo_dao = 6;
	optional int32 seat_mode = 7;
	optional bool allow_guest = 8 [default = true];
	optional string password = 9 [default = ""];
	optional bool silence = 10 [default = false];
}

// c -> s 加入房间
message EnterRoomRequest {
	required int32 room_id = 1;
	optional string password = 2;
}

message LeaveRoomRequest {
}

message JoinTeamRequest {
    enum Team {
		TEAM_A = 1;
		TEAM_B = 0;
		TEAM_RANDOM = 2;
	}
	required Team team = 1;
}

// c -> s 游戏准备、取消准备
message ReadyForGameRequest {
	enum Type {
		START_READY = 1;
		CANCEL_START_REDAY = 2;
		SEAT_READY = 3;
	}
	required Type type = 1;
}

// s -> c 单个玩家的所有信息，不需要更新的信息可以不填写，为节省数据包大小，repeated数据编号请尽量使用16以内数字
message SinglePlayerInfo {
    optional uint32 id = 1;        // 编号
    optional uint32 team = 2;      // 0：蓝队，1：红队，（2：红队first_player，可以不使用）
    optional uint32 role_id = 3;   // 角色
    
    optional uint32 hand_count = 4;     // 手牌数
    optional uint32 heal_count = 5;     // 治疗数
    
    repeated uint32 ex_cards = 6;      // 其他角色赋予的专属牌序号（及状态）
    repeated uint32 basic_cards = 7;       // 放置在面前的基础效果卡牌id
    
    optional uint32 gem = 8;           // 宝石数量
    optional uint32 crystal = 9;       // 水晶数量
    optional uint32 yellow_token = 10; // 黄色指示物
    optional uint32 blue_token = 11;   // 蓝色指示物
    optional uint32 covered_count = 12; // 盖牌数量，暂不支持多种盖牌
    
    optional bool is_knelt = 13;   // 是否横置
    
    repeated uint32 hands = 14;    // 手牌card_id组成，仅在发送给本人时使用
    repeated uint32 covereds = 15; // 盖牌card_id组合，仅在发送给本人时使用

	optional uint32 max_hand = 16;        // 最大手牌数变更

	
    optional string nickname = 17; // 昵称
	optional bool ready = 18 [default = false];
	repeated string delete_field = 19;  // 删除某个域，用于清空数组
}

// s -> c 局信息
message GameInfo {
    optional int32 room_id = 1;
	optional int32 player_id = 2;    
    optional uint32 red_morale = 3;
    optional uint32 blue_morale = 4;
    optional uint32 red_gem = 5;     // 红队宝石数量
    optional uint32 blue_gem = 6;    // 蓝队宝石数量
    optional uint32 red_crystal = 7; // 红队水晶数量
    optional uint32 blue_crystal = 8;// 蓝队水晶数量
    optional uint32 red_grail = 9;   // 红队星杯数
    optional uint32 blue_grail = 10;  // 蓝队星杯数 
	optional uint32 pile = 11;       // 牌堆
	optional uint32 discard = 12;    // 弃牌区
	optional bool is_started = 13 [default = false];    
	repeated SinglePlayerInfo player_infos = 14;
}

// c -> s 聊天
message Talk {
    optional string txt = 1;
}

enum GossipType {
    GOSSIP_TALK = 1;
    GOSSIP_NOTICE = 2;
}

message Error {
	required int32 id = 1;
	required int32 dst_id = 2;
	repeated int32 args = 3;
}

// s -> c 聊天及公告等
message Gossip {
    optional GossipType type = 1;
    optional string txt = 2;
    optional uint32 id = 3;
}

message HeartBeat {
}